// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using slf_backend.Data;

#nullable disable

namespace slf_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("slf_backend.Models.Admin", b =>
                {
                    b.Property<int>("IdAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdAdmin");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("slf_backend.Models.CoachPaymentAccount", b =>
                {
                    b.Property<int>("IdCoachPaymentAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdSubscriptionPaypal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdUserCoach")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusAccount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SubscriptionPaypalIdSubscriptionPaypal")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdCoachPaymentAccount");

                    b.HasIndex("IdUserCoach");

                    b.HasIndex("SubscriptionPaypalIdSubscriptionPaypal");

                    b.ToTable("CoachPaymentAccounts");
                });

            modelBuilder.Entity("slf_backend.Models.Message", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdStreamChat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdMessage");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("slf_backend.Models.SubscriptionPaypal", b =>
                {
                    b.Property<int>("IdSubscriptionPaypal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndSubscription")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdPaypal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdUserAthlete")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartSubscription")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusSubscription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdSubscriptionPaypal");

                    b.HasIndex("IdUserAthlete");

                    b.ToTable("SubscriptionsPaypal");
                });

            modelBuilder.Entity("slf_backend.Models.SubscriptionStripe", b =>
                {
                    b.Property<int>("IdSubscriptionStripe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndSubscription")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdStripe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdUserCoach")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartSubscription")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusSubscription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdSubscriptionStripe");

                    b.HasIndex("IdUserCoach");

                    b.ToTable("SubscriptionsStripe");
                });

            modelBuilder.Entity("slf_backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdminIdAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdminIdAdmin");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("slf_backend.Models.UserAthlete", b =>
                {
                    b.HasBaseType("slf_backend.Models.User");

                    b.Property<string>("WeightCategory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("UserAthletes", (string)null);
                });

            modelBuilder.Entity("slf_backend.Models.UserCoach", b =>
                {
                    b.HasBaseType("slf_backend.Models.User");

                    b.Property<decimal>("MonthPrice")
                        .HasColumnType("TEXT");

                    b.ToTable("UserCoachs", (string)null);
                });

            modelBuilder.Entity("slf_backend.Models.CoachPaymentAccount", b =>
                {
                    b.HasOne("slf_backend.Models.UserCoach", "UserCoach")
                        .WithMany("PaymentAccounts")
                        .HasForeignKey("IdUserCoach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("slf_backend.Models.SubscriptionPaypal", "SubscriptionPaypal")
                        .WithMany()
                        .HasForeignKey("SubscriptionPaypalIdSubscriptionPaypal");

                    b.Navigation("SubscriptionPaypal");

                    b.Navigation("UserCoach");
                });

            modelBuilder.Entity("slf_backend.Models.Message", b =>
                {
                    b.HasOne("slf_backend.Models.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("slf_backend.Models.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("slf_backend.Models.SubscriptionPaypal", b =>
                {
                    b.HasOne("slf_backend.Models.UserAthlete", "UserAthlete")
                        .WithMany("SubscriptionsPaypal")
                        .HasForeignKey("IdUserAthlete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAthlete");
                });

            modelBuilder.Entity("slf_backend.Models.SubscriptionStripe", b =>
                {
                    b.HasOne("slf_backend.Models.UserCoach", "UserCoach")
                        .WithMany("SubscriptionsStripe")
                        .HasForeignKey("IdUserCoach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCoach");
                });

            modelBuilder.Entity("slf_backend.Models.User", b =>
                {
                    b.HasOne("slf_backend.Models.Admin", "Admin")
                        .WithMany("Users")
                        .HasForeignKey("AdminIdAdmin");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("slf_backend.Models.UserAthlete", b =>
                {
                    b.HasOne("slf_backend.Models.User", null)
                        .WithOne()
                        .HasForeignKey("slf_backend.Models.UserAthlete", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("slf_backend.Models.UserCoach", b =>
                {
                    b.HasOne("slf_backend.Models.User", null)
                        .WithOne()
                        .HasForeignKey("slf_backend.Models.UserCoach", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("slf_backend.Models.Admin", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("slf_backend.Models.User", b =>
                {
                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");
                });

            modelBuilder.Entity("slf_backend.Models.UserAthlete", b =>
                {
                    b.Navigation("SubscriptionsPaypal");
                });

            modelBuilder.Entity("slf_backend.Models.UserCoach", b =>
                {
                    b.Navigation("PaymentAccounts");

                    b.Navigation("SubscriptionsStripe");
                });
#pragma warning restore 612, 618
        }
    }
}
